function [Projection, classification] = myLDA(filename, l)
%MYLDA: Function that computes 

% First load the training data
[train_X, train_y] = get_training_data('./data/data.csv');
[test_X, test_y] = get_test_data('./data/data.csv');
Projection_X = vertcat(train_X, test_X);
Projection_y = vertcat(train_y, test_y);

% Finding the digits for which we want the features
[eightDigitFeatureMatrix, eightVec] = get_digit_feature_matrix(Projection_X, Projection_y, 8);
[nineDigitFeatureMatrix, nineVec] = get_digit_feature_matrix(Projection_X, Projection_y, 9);

% Making a new feature matrix that contains data from only these three
% digits
X = vertcat(eightDigitFeatureMatrix, nineDigitFeatureMatrix);
y = vertcat(eightVec, nineVec);

% Run the PCA algorithm on the input feature matrix for the training set
[principal_components_system, score, explained_variance] = pca(X);
principal_components = principal_components_system(:, 1:2);

X = X - mean(X);
Projection = X * principal_components;


% Running the PCA algorithm on input feature matrix for training set and
% getting l principal components
principal_components_for_LDA = principal_components_system(:, 1:l);

size(principal_components)
eight_pc = get_digit_feature_matrix(Projection, y, 8);
nine_pc = get_digit_feature_matrix(P , y, 9);

% We get the LDA vector from this
[LDA, a, b] = LDA_twoclass(vertcat(eight_pc, nine_pc), y);

% Getting the classifier vector
classifier_vector = [-projectionVector(2); projectionVector(1)];
end

